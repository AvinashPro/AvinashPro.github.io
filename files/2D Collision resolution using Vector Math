<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title></title>
    <style>
        * {
            margin: 0;
        }
        html, body {
            position: relative;
            width: 100vw;
            height: 100vh;
            overflow: hidden;
        }
        canvas {
            image-rendering: pixelated;
        }
        
        #panel {
            position: absolute;
            top: 20px;
            left: 20px;
            color: #495359;
        }
    </style>
</head>
<body>
    <div id="panel"></div>
<script>
    const canvas = document.createElement("canvas");
    canvas.width = innerWidth;
    canvas.height = innerHeight;
    document.body.appendChild(canvas);
    const ctx = canvas.getContext("2d");
    
    const rand = (min, max) => Math.random() * (max - min) + min;
    
    let noOfParticles = 100;
    let particles = [];
    function generateParticle(array) {
        const r = rand(5, 8),
              x = rand(r, canvas.width-r),
              y = rand(r, canvas.height-r),
              vel = new Vector(rand(-2, 2), rand(-2, 2));
        
        array.push(new Particle(x, y, r, "#09f", vel));
    }
    
    
    class Vector {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
    
        add(v1) {
            return new Vector(this.x + v1.x, this.y + v1.y);
        }
    
        sub(v1) {
            return new Vector(this.x - v1.x, this.y - v1.y);
        }
    
        mult(a) {
            return new Vector(this.x * a, this.y * a);
        }
        
        static dist(v1, v2) {
            return Math.hypot(v1.x - v2.x, v1.y - v2.y);
        }
        
        unit() {
            const d = Math.hypot(this.x, this.y);
            
            return new Vector(this.x/d, this.y/d);
            
        }
        
        dot(v1) {
            return this.x * v1.x + this.y * v1.y;
        }
        
        
    }
    
    
    class Particle {
        constructor(x, y, r, col, vel) {
            this.pos = new Vector(x, y);
            this.r = r;
            this.col = col;
            this.vel = new Vector(vel.x, vel.y);
            
            this.mass = rand(1, 3);
            this.bounce = 0.6;
            this.gravity = 0.2;
            this.friction = 0.01;
        }
        
        draw() {
            ctx.beginPath();
            ctx.fillStyle = this.col;
            ctx.arc(this.pos.x, this.pos.y, this.r, 0, Math.PI * 2, false);
            ctx.fill();
        }
        
        wallCollision() {
            if(this.pos.x - this.r < 0) this.pos.x = this.r, this.vel.x *= -1;
            else if(this.pos.x + this.r > canvas.width) this.pos.x = canvas.width - this.r, this.vel.x *= -1;
            if(this.pos.y - this.r < 0) this.vel.y *= -1;
            else if(this.pos.y + this.r > canvas.height) this.pos.y = canvas.height - this.r, this.vel.y *= -0.9;
        }
        
        update() {
            this.draw();
            this.wallCollision();
            this.pos = this.pos.add(this.vel);
            this.vel.y += this.gravity;
            this.vel.x *= 1 - this.friction;
        }
        
    }
    
    
    function main() {
        for(let idx = 0; idx < noOfParticles; idx++) {
            generateParticle(particles);
        }
        // c1 = new Circle(40, 20, 20, "rgba(255,0,68,0.4)", {x: 1, y: 1});
        // c2 = new Circle(100, 100, 15, "rgba(32,40,148,0.4)", {x: -0.5, y: -0.9});
        
        GameLoop();
    }
    
    main();
    
    // console.log(particles)
    
    function GameLoop() {
        requestAnimationFrame(GameLoop);
        ctx.fillStyle = "#fff";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        particles.forEach((p1, idx1) => {
            p1.update();
            
            particles.forEach((p2, idx2)=>{
                let unitVec = p2.pos.sub(p1.pos).unit();
                if(checkCCcollision(p1, p2) && idx1 != idx2) {
                    
                    
                    
                    const depth = getDepth(p1, p2);
                    const v = p2.pos.sub(p1.pos);
                    const relativeVel = p1.vel.sub(p2.vel);
                    const e = Math.min(p1.bounce, p2.bounce);
                    const impulse = -(1 + e) * relativeVel.dot(unitVec) / (1 / p1.mass + 1 / p2.mass);
                    const impulseN = unitVec.mult(impulse);
            
                    if(unitVec.dot(v) < 0) {
                        unitVec = unitVec.mult(-1);
                    }
            
                    p1.vel = p1.vel.add(impulseN.mult(1/p1.mass));
                    p2.vel = p2.vel.sub(impulseN.mult(1/p2.mass));
            
            
                    p1.pos = p1.pos.sub(unitVec.mult(depth/2));
                    p2.pos = p2.pos.add(unitVec.mult(depth/2));
                    
                    
                    
                }
            })
            
        })
        
        //c1.update();
        //c2.update();
        
        
        /*let unitVec = c2.pos.sub(c1.pos).unit();
        if(checkCCcollisioon(c1, c2)) {
            const depth = getDepth(c1, c2);
            const v = c2.pos.sub(c1.pos);
            const relativeVel = c1.vel.sub(c2.vel);
            const e = Math.min(c1.bounce, c2.bounce);
            const impulse = -(1 + e) * relativeVel.dot(unitVec) / (1 / c1.mass + 1 / c2.mass);
            const impulseN = unitVec.mult(impulse);
            
            if(unitVec.dot(v) < 0) {
                unitVec = unitVec.mult(-1);
            }
            
            c1.vel = c1.vel.add(impulseN.mult(1/c1.mass));
            c2.vel = c2.vel.sub(impulseN.mult(1/c2.mass));
            
            
            c1.pos = c1.pos.sub(unitVec.mult(depth/2));
            c2.pos = c2.pos.add(unitVec.mult(depth/2));
            
            
        }*/
        
        
        
        // DEV INFORMATION
        /*const devInfo = {
            "Depth": getDepth(c1, c2),
            "Unit vector": `x: ${unitVec.x.toFixed(3)}, y: ${unitVec.y.toFixed(3)}`,
            "C1 Vel": `x: ${c1.vel.x.toFixed(3)}, y: ${c1.vel.y.toFixed(3)}`,
            "C2 Vel": `x: ${c2.vel.x.toFixed(3)}, y: ${c2.vel.y.toFixed(3)}`
        };
        
        let txt = "";
        Object.keys(devInfo).forEach(key => {
            txt += `${key} = ${devInfo[key]}</br>`;
        })
        
        document.querySelector("#panel").innerHTML = txt;*/
        // DEV INFORMATION
        
        
        
    }
    
    
    function getDepth(c1, c2) {
        if(checkCCcollision(c1, c2)) {
            let distance = Vector.dist(c1.pos, c2.pos);
        
            return c1.r + c2.r - distance;
        }
        
        return 0;
    }
    
    
    
    
    function checkCCcollision(c1, c2) {
        let distance = Vector.dist(c1.pos, c2.pos);
        
        if(distance < c1.r + c2.r) return true;
        return false;
    }
    
    
    
    
    
    function resize() {
        canvas.width = innerWidth;
        canvas.height = innerHeight;
    }
    
    onresize = resize;
    
    
</script>
</body>
</html>
